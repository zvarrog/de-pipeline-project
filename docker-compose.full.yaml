version: '3.8'

services:
  # PostgreSQL база для Airflow
  postgres:
    image: postgres:13
    environment:
      POSTGRES_USER: airflow
      POSTGRES_PASSWORD: airflow
      POSTGRES_DB: airflow
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "airflow"]
      interval: 10s
      retries: 5
      start_period: 5s

  # Redis для Celery (если нужен)
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  # Основной сервис с API и ML
  app:
    build: .
    ports:
      - "8000:8000"
    volumes:
      - ./data:/app/data
      - ./models:/app/models
      - ./mlruns:/app/mlruns
      - ./spark_processing.py:/app/spark_processing.py
      - ./torch_model.py:/app/torch_model.py
      - ./mlflow_integration.py:/app/mlflow_integration.py
    environment:
      - MLFLOW_TRACKING_URI=file:///app/mlruns
      - SPARK_HOME=/opt/spark
      - JAVA_HOME=/usr/lib/jvm/java-11-openjdk-amd64
    command: >
      bash -c "
        # Устанавливаем Spark если нужно
        pip install pyspark==3.5.0 torch transformers findspark
        
        # Запускаем MLflow сервер
        mlflow server --host 0.0.0.0 --port 5000 --backend-store-uri file:///app/mlruns --default-artifact-root /app/mlruns &
        
        # Запускаем FastAPI
        uvicorn simple_api:app --host 0.0.0.0 --port 8000 --reload
      "
    depends_on:
      - postgres
      - redis

  # Airflow Webserver
  airflow-webserver:
    build: .
    command: >
      bash -c "
        airflow db init &&
        airflow users create --username admin --firstname Admin --lastname User --role Admin --email admin@example.com --password admin &&
        airflow webserver --port 8080
      "
    ports:
      - "8080:8080"
    volumes:
      - ./dags:/opt/airflow/dags
      - ./data:/app/data
      - ./models:/app/models
      - ./config/airflow.cfg:/opt/airflow/airflow.cfg
    environment:
      - AIRFLOW__CORE__EXECUTOR=LocalExecutor
      - AIRFLOW__DATABASE__SQL_ALCHEMY_CONN=postgresql+psycopg2://airflow:airflow@postgres/airflow
      - AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION=True
      - AIRFLOW__CORE__LOAD_EXAMPLES=False
      - AIRFLOW__API__AUTH_BACKENDS=airflow.api.auth.backend.basic_auth,airflow.api.auth.backend.session
    depends_on:
      postgres:
        condition: service_healthy

  # Airflow Scheduler
  airflow-scheduler:
    build: .
    command: airflow scheduler
    volumes:
      - ./dags:/opt/airflow/dags
      - ./data:/app/data
      - ./models:/app/models
      - ./config/airflow.cfg:/opt/airflow/airflow.cfg
    environment:
      - AIRFLOW__CORE__EXECUTOR=LocalExecutor
      - AIRFLOW__DATABASE__SQL_ALCHEMY_CONN=postgresql+psycopg2://airflow:airflow@postgres/airflow
      - AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION=True
      - AIRFLOW__CORE__LOAD_EXAMPLES=False
    depends_on:
      postgres:
        condition: service_healthy

  # MLflow UI (отдельный сервис)
  mlflow:
    build: .
    command: mlflow server --host 0.0.0.0 --port 5000 --backend-store-uri file:///app/mlruns --default-artifact-root /app/mlruns
    ports:
      - "5000:5000"
    volumes:
      - ./mlruns:/app/mlruns
      - ./models:/app/models
    environment:
      - MLFLOW_TRACKING_URI=file:///app/mlruns

volumes:
  postgres_data:
